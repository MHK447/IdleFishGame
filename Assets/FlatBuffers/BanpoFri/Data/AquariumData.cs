// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace BanpoFri.Data
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct AquariumData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static AquariumData GetRootAsAquariumData(ByteBuffer _bb) { return GetRootAsAquariumData(_bb, new AquariumData()); }
  public static AquariumData GetRootAsAquariumData(ByteBuffer _bb, AquariumData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AquariumData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Fishidx { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool MutateFishidx(int fishidx) { int o = __p.__offset(4); if (o != 0) { __p.bb.PutInt(o + __p.bb_pos, fishidx); return true; } else { return false; } }

  public static Offset<BanpoFri.Data.AquariumData> CreateAquariumData(FlatBufferBuilder builder,
      int fishidx = 0) {
    builder.StartTable(1);
    AquariumData.AddFishidx(builder, fishidx);
    return AquariumData.EndAquariumData(builder);
  }

  public static void StartAquariumData(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddFishidx(FlatBufferBuilder builder, int fishidx) { builder.AddInt(0, fishidx, 0); }
  public static Offset<BanpoFri.Data.AquariumData> EndAquariumData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<BanpoFri.Data.AquariumData>(o);
  }
  public AquariumDataT UnPack() {
    var _o = new AquariumDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AquariumDataT _o) {
    _o.Fishidx = this.Fishidx;
  }
  public static Offset<BanpoFri.Data.AquariumData> Pack(FlatBufferBuilder builder, AquariumDataT _o) {
    if (_o == null) return default(Offset<BanpoFri.Data.AquariumData>);
    return CreateAquariumData(
      builder,
      _o.Fishidx);
  }
}

public class AquariumDataT
{
  [Newtonsoft.Json.JsonProperty("fishidx")]
  public int Fishidx { get; set; }

  public AquariumDataT() {
    this.Fishidx = 0;
  }
}


static public class AquariumDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Fishidx*/, 4 /*int*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
