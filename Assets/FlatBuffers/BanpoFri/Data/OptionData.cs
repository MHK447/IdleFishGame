// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace BanpoFri.Data
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct OptionData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_5_26(); }
  public static OptionData GetRootAsOptionData(ByteBuffer _bb) { return GetRootAsOptionData(_bb, new OptionData()); }
  public static OptionData GetRootAsOptionData(ByteBuffer _bb, OptionData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public OptionData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Language { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLanguageBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetLanguageBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetLanguageArray() { return __p.__vector_as_array<byte>(4); }
  public bool Bgm { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool MutateBgm(bool bgm) { int o = __p.__offset(6); if (o != 0) { __p.bb.Put(o + __p.bb_pos, (byte)(bgm ? 1 : 0)); return true; } else { return false; } }
  public bool Effect { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool MutateEffect(bool effect) { int o = __p.__offset(8); if (o != 0) { __p.bb.Put(o + __p.bb_pos, (byte)(effect ? 1 : 0)); return true; } else { return false; } }
  public bool Slowgraphic { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool MutateSlowgraphic(bool slowgraphic) { int o = __p.__offset(10); if (o != 0) { __p.bb.Put(o + __p.bb_pos, (byte)(slowgraphic ? 1 : 0)); return true; } else { return false; } }
  public bool Vibration { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)true; } }
  public bool MutateVibration(bool vibration) { int o = __p.__offset(12); if (o != 0) { __p.bb.Put(o + __p.bb_pos, (byte)(vibration ? 1 : 0)); return true; } else { return false; } }
  public bool Subscribeorder { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool MutateSubscribeorder(bool subscribeorder) { int o = __p.__offset(14); if (o != 0) { __p.bb.Put(o + __p.bb_pos, (byte)(subscribeorder ? 1 : 0)); return true; } else { return false; } }
  public bool Autofelling { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool MutateAutofelling(bool autofelling) { int o = __p.__offset(16); if (o != 0) { __p.bb.Put(o + __p.bb_pos, (byte)(autofelling ? 1 : 0)); return true; } else { return false; } }
  public BanpoFri.Data.AquariumData? Aquariumdata { get { int o = __p.__offset(18); return o != 0 ? (BanpoFri.Data.AquariumData?)(new BanpoFri.Data.AquariumData()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public BanpoFri.Data.UpgradeData? Upgradedata { get { int o = __p.__offset(20); return o != 0 ? (BanpoFri.Data.UpgradeData?)(new BanpoFri.Data.UpgradeData()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<BanpoFri.Data.OptionData> CreateOptionData(FlatBufferBuilder builder,
      StringOffset languageOffset = default(StringOffset),
      bool bgm = false,
      bool effect = false,
      bool slowgraphic = false,
      bool vibration = true,
      bool subscribeorder = false,
      bool autofelling = false,
      Offset<BanpoFri.Data.AquariumData> aquariumdataOffset = default(Offset<BanpoFri.Data.AquariumData>),
      Offset<BanpoFri.Data.UpgradeData> upgradedataOffset = default(Offset<BanpoFri.Data.UpgradeData>)) {
    builder.StartTable(9);
    OptionData.AddUpgradedata(builder, upgradedataOffset);
    OptionData.AddAquariumdata(builder, aquariumdataOffset);
    OptionData.AddLanguage(builder, languageOffset);
    OptionData.AddAutofelling(builder, autofelling);
    OptionData.AddSubscribeorder(builder, subscribeorder);
    OptionData.AddVibration(builder, vibration);
    OptionData.AddSlowgraphic(builder, slowgraphic);
    OptionData.AddEffect(builder, effect);
    OptionData.AddBgm(builder, bgm);
    return OptionData.EndOptionData(builder);
  }

  public static void StartOptionData(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddLanguage(FlatBufferBuilder builder, StringOffset languageOffset) { builder.AddOffset(0, languageOffset.Value, 0); }
  public static void AddBgm(FlatBufferBuilder builder, bool bgm) { builder.AddBool(1, bgm, false); }
  public static void AddEffect(FlatBufferBuilder builder, bool effect) { builder.AddBool(2, effect, false); }
  public static void AddSlowgraphic(FlatBufferBuilder builder, bool slowgraphic) { builder.AddBool(3, slowgraphic, false); }
  public static void AddVibration(FlatBufferBuilder builder, bool vibration) { builder.AddBool(4, vibration, true); }
  public static void AddSubscribeorder(FlatBufferBuilder builder, bool subscribeorder) { builder.AddBool(5, subscribeorder, false); }
  public static void AddAutofelling(FlatBufferBuilder builder, bool autofelling) { builder.AddBool(6, autofelling, false); }
  public static void AddAquariumdata(FlatBufferBuilder builder, Offset<BanpoFri.Data.AquariumData> aquariumdataOffset) { builder.AddOffset(7, aquariumdataOffset.Value, 0); }
  public static void AddUpgradedata(FlatBufferBuilder builder, Offset<BanpoFri.Data.UpgradeData> upgradedataOffset) { builder.AddOffset(8, upgradedataOffset.Value, 0); }
  public static Offset<BanpoFri.Data.OptionData> EndOptionData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<BanpoFri.Data.OptionData>(o);
  }
  public OptionDataT UnPack() {
    var _o = new OptionDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(OptionDataT _o) {
    _o.Language = this.Language;
    _o.Bgm = this.Bgm;
    _o.Effect = this.Effect;
    _o.Slowgraphic = this.Slowgraphic;
    _o.Vibration = this.Vibration;
    _o.Subscribeorder = this.Subscribeorder;
    _o.Autofelling = this.Autofelling;
    _o.Aquariumdata = this.Aquariumdata.HasValue ? this.Aquariumdata.Value.UnPack() : null;
    _o.Upgradedata = this.Upgradedata.HasValue ? this.Upgradedata.Value.UnPack() : null;
  }
  public static Offset<BanpoFri.Data.OptionData> Pack(FlatBufferBuilder builder, OptionDataT _o) {
    if (_o == null) return default(Offset<BanpoFri.Data.OptionData>);
    var _language = _o.Language == null ? default(StringOffset) : builder.CreateString(_o.Language);
    var _aquariumdata = _o.Aquariumdata == null ? default(Offset<BanpoFri.Data.AquariumData>) : BanpoFri.Data.AquariumData.Pack(builder, _o.Aquariumdata);
    var _upgradedata = _o.Upgradedata == null ? default(Offset<BanpoFri.Data.UpgradeData>) : BanpoFri.Data.UpgradeData.Pack(builder, _o.Upgradedata);
    return CreateOptionData(
      builder,
      _language,
      _o.Bgm,
      _o.Effect,
      _o.Slowgraphic,
      _o.Vibration,
      _o.Subscribeorder,
      _o.Autofelling,
      _aquariumdata,
      _upgradedata);
  }
}

public class OptionDataT
{
  [Newtonsoft.Json.JsonProperty("language")]
  public string Language { get; set; }
  [Newtonsoft.Json.JsonProperty("bgm")]
  public bool Bgm { get; set; }
  [Newtonsoft.Json.JsonProperty("effect")]
  public bool Effect { get; set; }
  [Newtonsoft.Json.JsonProperty("slowgraphic")]
  public bool Slowgraphic { get; set; }
  [Newtonsoft.Json.JsonProperty("vibration")]
  public bool Vibration { get; set; }
  [Newtonsoft.Json.JsonProperty("subscribeorder")]
  public bool Subscribeorder { get; set; }
  [Newtonsoft.Json.JsonProperty("autofelling")]
  public bool Autofelling { get; set; }
  [Newtonsoft.Json.JsonProperty("aquariumdata")]
  public BanpoFri.Data.AquariumDataT Aquariumdata { get; set; }
  [Newtonsoft.Json.JsonProperty("upgradedata")]
  public BanpoFri.Data.UpgradeDataT Upgradedata { get; set; }

  public OptionDataT() {
    this.Language = null;
    this.Bgm = false;
    this.Effect = false;
    this.Slowgraphic = false;
    this.Vibration = true;
    this.Subscribeorder = false;
    this.Autofelling = false;
    this.Aquariumdata = null;
    this.Upgradedata = null;
  }
}


static public class OptionDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Language*/, false)
      && verifier.VerifyField(tablePos, 6 /*Bgm*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 8 /*Effect*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 10 /*Slowgraphic*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 12 /*Vibration*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 14 /*Subscribeorder*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 16 /*Autofelling*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTable(tablePos, 18 /*Aquariumdata*/, BanpoFri.Data.AquariumDataVerify.Verify, false)
      && verifier.VerifyTable(tablePos, 20 /*Upgradedata*/, BanpoFri.Data.UpgradeDataVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
